1. Why does prove-simple use mapcan as the list mapping operator? 
Hint: "nil".
A failed proof returns nil, otherwise, mapcan returns all the lists, and
doesn't return the nils.

2.  The following functions all return lists of multiple bindings: 
prove-simple, prove-and, prove-or, prove-not. 
Why don't we just return one binding? 
Because there are often times multiple bindings. Only returning one binding
would, for instance, return only one of the parents. Returning multiple 
bindings will return both bindings containing both parents in question.

3. Given an example of "r" before and after it is processed by change-vars.
Each expression is rehashed using the value passed in for r. 

4. The function prove-code evals a structure called code that creates a 
let statement which defines some vars (local variables) then calls some 
code expr. What is going on here?  
The let creates the list of bindings that hold each variable, code creates
the code block that declares each binding, inserting the expression inside
each. Prove-code returns the entire expression with each binding set in an 
environment.
