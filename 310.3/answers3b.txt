1. Why does prove-simple use mapcan as the list mapping operator? 
Hint: "nil".
A failed proof returns nil, otherwise, mapcan returns all the lists, and
doesn't return the nils.

2.  The following functions all return lists of multiple bindings: 
prove-simple, prove-and, prove-or, prove-not. 
Why don't we just return one binding? 
Because there are often times multiple bindings. Only returning one binding
would, for instance, return only one of the parents. Returning multiple 
bindings will return both bindings containing both parents in question.

3. Given an example of "r" before and after it is processed by change-vars.
Before: ?adam
After: !adam

4. The function prove-code evals a structure called code that creates a 
let statement which defines some vars (local variables) then calls some 
code expr. What is going on here?  
